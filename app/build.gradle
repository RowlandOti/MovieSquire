apply plugin: 'com.android.application'

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId project.APPLICATION_ID
        versionName project.VERSION_NAME
        versionCode Integer.parseInt(project.VERSION_CODE)
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
    }
    signingConfigs {
        release {
            def propFile = file('../.signing/signing.properties')
            if(propFile.exists()) {
                def props = new Properties()
                props.load(new FileInputStream(propFile))

                storeFile = file(props['STORE_FILE'])
                storePassword = props['STORE_PASSWORD']
                keyAlias = props['KEY_ALIAS']
                keyPassword = props['KEY_PASSWORD']
            }
        }
    }
    productFlavors {
        //Paid Version
        pro {
            applicationId = project.APPLICATION_ID + ".pro"
            versionName project.VERSION_NAME + "-pro"
            //Accessed in java code as BuildConfig.IS_PRO_VERSION
            buildConfigField "boolean", "IS_PRO_VERSION", "true"
            buildConfigField 'String', 'IMDB_API_KEY', '"153677fe3867bbfc1eedc322abc94afc"'
            //productFlavors.pro.signingConfig signingConfigs.release
        }
        //Free Version
        free {
            applicationId = project.APPLICATION_ID + ".free"
            versionName project.VERSION_NAME + "-free"
            //Accessed in java code as BuildConfig.IS_PRO_VERSION
            buildConfigField "boolean", "IS_PRO_VERSION", "false"
            buildConfigField 'String', 'IMDB_API_KEY', '"153677fe3867bbfc1eedc322abc94afc"'
            //productFlavors.free.signingConfig signingConfigs.release
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if(rootProject.file('signing.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }
    }
}

dependencies {
    // Local binary dependency
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // Module dependency
    compile project(':libraries:design')
    // Remote binary dependency - Android
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:design:23.0.1'
    // Remote binary dependency - Third Party
    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
    compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'
    compile 'com.tonicartos:superslim:0.4.13'
    compile 'com.uwetrottmann:androidutils:2.0.0'
    compile 'com.facebook.stetho:stetho:1.2.0'
    compile 'com.facebook.stetho:stetho-okhttp:1.2.0'
}
